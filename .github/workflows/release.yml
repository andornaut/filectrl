name: Release

on:
  push:
    branches:
      - main
    tags:
      - "*"

# Add permissions block to request necessary access
permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Build
        run: cargo build --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: filectrl-${{ matrix.os }}
          path: target/release/filectrl

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -la artifacts/

      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Get the tag name
            const tag = context.ref === 'refs/heads/main' ? 'latest' : context.ref.replace('refs/tags/', '');
            const releaseName = context.ref === 'refs/heads/main' ? 'Latest Release' : tag;

            // Create the release
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: releaseName,
              generate_release_notes: true,
              draft: false,
              prerelease: false
            });

            // Upload artifacts
            const uploadArtifact = async (filePath, name) => {
              const file = fs.readFileSync(filePath);
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: name,
                data: file
              });
            };

            // Upload both binaries
            await uploadArtifact('artifacts/filectrl-ubuntu-latest/filectrl', 'filectrl-linux');
            await uploadArtifact('artifacts/filectrl-macos-latest/filectrl', 'filectrl-macos');
